{"version":3,"sources":["ticket/Schedule.js"],"names":["ScheduleRow","memo","props","index","station","arriveTime","departTime","stay","isStartStation","isEndStation","isDepartStation","isArriveStation","beforeDepartStation","afterArriveStation","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","classnames","icon-red","toString","padStart","grey","red","concat","Schedule","date","trainNumber","departStation","arriveStation","fetchSchedule","_useState","useState","_useState2","Object","_Users_iss_myself_demos_react_hook_pwa_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","scheduleList","setScheduleList","useEffect","dayjs","format","data","map","schedule","assign","key"],"mappings":"uNAMMA,SAAcC,eAAK,SAAqBC,GAAO,IAEjDC,EAWED,EAXFC,MACAC,EAUEF,EAVFE,QACAC,EASEH,EATFG,WACAC,EAQEJ,EARFI,WACAC,EAOEL,EAPFK,KACAC,EAMEN,EANFM,eACAC,EAKEP,EALFO,aACAC,EAIER,EAJFQ,gBACAC,EAGET,EAHFS,gBACAC,EAEEV,EAFFU,oBACAC,EACEX,EADFW,mBAEF,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,OAAQ,CAAEC,WAAYT,GAAmBC,KACjED,EAAkB,SAAMC,EAAkB,SAAMR,EAAMiB,WAAWC,SAAS,EAAG,MAEhFP,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAW,MAAO,CAAEI,KAAMV,GAAuBC,KAC/DC,EAAAC,EAAAC,cAAA,QACEC,UAAWC,IAAW,UAAW,CAC/BK,IAAKZ,GAAmBD,KAGzBN,GAEHU,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAW,UAAW,CAAEK,IAAKb,KAC3CF,EAAiB,qBAAQH,GAE5BS,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAW,UAAW,CAAEK,IAAKZ,KAC3CF,EAAe,qBAAQH,GAE1BQ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAYT,GAAkBC,EAAe,IAAjC,GAAAe,OAA0CjB,EAA1C,gBAMrB,SAASkB,EAASvB,GAAO,IAC9BwB,EAAmExB,EAAnEwB,KAAMC,EAA6DzB,EAA7DyB,YAAaC,EAAgD1B,EAAhD0B,cAAeC,EAAiC3B,EAAjC2B,cAAeC,EAAkB5B,EAAlB4B,cADnBC,EAEEC,mBAAS,IAFXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAE/BK,EAF+BH,EAAA,GAEjBI,EAFiBJ,EAAA,GAatC,OATAK,oBAAU,WACRR,EACE,CAAEJ,KAAMa,IAAMb,GAAMc,OAAO,cAAeb,cAAaC,gBAAeC,iBACtE,SAAAY,GACEJ,EAAgBI,MAGnB,CAACZ,EAAeH,EAAME,EAAeE,EAAeH,IAGrDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,gBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,gBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,gBACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,6BAEFH,EAAAC,EAAAC,cAAA,UACGoB,EAAaM,IAAI,SAACC,EAAUxC,GAAX,OAChBW,EAAAC,EAAAC,cAAChB,EAADkC,OAAAU,OAAA,CAAaC,IAAKF,EAASvC,QAASD,MAAOA,EAAQ,GAAOwC","file":"static/js/10.e5ae23bd.chunk.js","sourcesContent":["import React, { memo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport dayjs from \"dayjs\";\nimport \"./Schedule.css\";\n\nconst ScheduleRow = memo(function ScheduleRow(props) {\n  const {\n    index,\n    station,\n    arriveTime,\n    departTime,\n    stay,\n    isStartStation,\n    isEndStation,\n    isDepartStation,\n    isArriveStation,\n    beforeDepartStation,\n    afterArriveStation,\n  } = props;\n  return (\n    <li>\n      <div className={classnames(\"icon\", { \"icon-red\": isDepartStation || isArriveStation })}>\n        {isDepartStation ? \"出\" : isArriveStation ? \"到\" : index.toString().padStart(2, \"0\")}\n      </div>\n      <div className={classnames(\"row\", { grey: beforeDepartStation || afterArriveStation })}>\n        <span\n          className={classnames(\"station\", {\n            red: isArriveStation || isDepartStation,\n          })}\n        >\n          {station}\n        </span>\n        <span className={classnames(\"arrtime\", { red: isDepartStation })}>\n          {isStartStation ? \"始发站\" : arriveTime}\n        </span>\n        <span className={classnames(\"arrtime\", { red: isArriveStation })}>\n          {isEndStation ? \"终点站\" : departTime}\n        </span>\n        <span className=\"stoptime\">{isStartStation || isEndStation ? \"-\" : `${stay}分`}</span>\n      </div>\n    </li>\n  );\n});\n\nexport default function Schedule(props) {\n  const { date, trainNumber, departStation, arriveStation, fetchSchedule } = props;\n  const [scheduleList, setScheduleList] = useState([]);\n\n  useEffect(() => {\n    fetchSchedule(\n      { date: dayjs(date).format(\"YYYY-MM-DD\"), trainNumber, departStation, arriveStation },\n      data => {\n        setScheduleList(data);\n      }\n    );\n  }, [arriveStation, date, departStation, fetchSchedule, trainNumber]);\n\n  return (\n    <div className=\"schedule\">\n      <div className=\"dialog\">\n        <h1>列车时刻表</h1>\n        <div className=\"head\">\n          <span className=\"station\">车站</span>\n          <span className=\"deptime\">到达</span>\n          <span className=\"arrtime\">发车</span>\n          <span className=\"stoptime\">停留时间</span>\n        </div>\n        <ul>\n          {scheduleList.map((schedule, index) => (\n            <ScheduleRow key={schedule.station} index={index + 1} {...schedule} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nSchedule.propTypes = {\n  date: PropTypes.number.isRequired,\n  trainNumber: PropTypes.string.isRequired,\n  departStation: PropTypes.string.isRequired,\n  arriveStation: PropTypes.string.isRequired,\n  fetchSchedule: PropTypes.func.isRequired,\n};\n"],"sourceRoot":""}